constant длительность_погрузки_на_тележку = 1.5;
constant длительность_доставки_тележкой = 2.0;
constant длина_поля = 3;

sequence экспоненциальный = new Exponential(123456789);
sequence нормальный = new Normal(123456789);
sequence равномерный = new Uniform(123456789);
sequence треугольный = new Triangular(123456789);
sequence случайный_тип_клиента = new DiscreteHistogram<Тип_клиента>(123456789,
    #[Тип_клиента.Тип1 -> 1.0, Тип_клиента.Тип2 -> 5.0]);

enum Положение {
    СТАНОК_1, СТАНОК_2, СТАНОК_3, НАКОПИТЕЛЬ_1, НАКОПИТЕЛЬ_2, ТЕЛЕЖКА_1_Н, ТЕЛЕЖКА_1_К, ТЕЛЕЖКА_2_Н, ТЕЛЕЖКА_2_К, НИГДЕ
}

type Накопители {
    int номер;
    Положение положение;
    int текущее_количество;
}

resource накопитель_1 = Накопители.create(1, Положение.НАКОПИТЕЛЬ_1, 10);
resource накопитель_2 = Накопители.create(2, Положение.НАКОПИТЕЛЬ_2, 0);

set terminateCondition() {
    return накопитель_2.текущее_количество == 10;
}

operation Погрузка_детали() {
    relevant станок = станок_3.onlyif[состояние == Состояние_станка.ЗАКОНЧИЛ_ОБРАБОТКУ];
    relevant накопитель = Накопители.all.filter[номер == 1 && текущее_количество > 0].any;
    relevant деталь = Детали.all.filter[положение == Положение.НАКОПИТЕЛЬ_1].maxBySafe[количество_обслуженных];
    relevant робот = Роботы.all.filter [
        номер == 1 && положение == Положение.НАКОПИТЕЛЬ_1 && состояние == Состояние_робота.СВОБОДЕН
    ].minBySafe[количество_обслуженных];

    set begin() {
        накопитель.текущее_количество = накопитель.текущее_количество - 1;
    }

    set duration() {
        return экспоненциальный.next(1.0 / длительность_погрузки_на_тележку);
    }

    set end() {
        робот.состояние = Состояние_робота.СВОБОДЕН;
    }
}

rule Перемещение_фишки(Место_дырки куда_перемещать, int на_сколько_перемещать) {
    relevant _фишка = Фишка.all.filter[где_дырка(место) == куда_перемещать].any();
    relevant _дырка = дырка;

    set execute() {
        _фишка.место = _фишка.место + на_сколько_перемещать;
        _дырка.место = _дырка.место - на_сколько_перемещать;
    }
}

event Событие_прихода_клиента() {
    var клиент = Клиенты.create(случайный_тип_клиента.next(), Состояние_клиента.Пришел);
    Событие_прихода_клиента.plan(currentTime + интервал_прихода.next());
    парикмахерская.количество_в_очереди = парикмахерская.количество_в_очереди + 1;
}

boolean робот_связан_со_станком(int номер_робота, int номер_станка)
{
    if (номер_робота == 2) {
        return номер_станка == 1 || номер_станка == 2;
    } else if (номер_робота == 3) {
        return номер_станка == 3;
    }

    return false;
}

logic Model {
    activity погрузка_детали = new Activity(Погрузка_детали.create());
    activity возврат_тележки_1 = new Activity(Возврат_тележки.create(1, Положение.ТЕЛЕЖКА_1_К, Положение.ТЕЛЕЖКА_1_Н));
}


set init() {
    Событие_прихода_клиента.plan(currentTime + интервал_прихода.next());
}

set terminateCondition() {
    return currentTime >= 7 * 12 * 60;
}

frame Кадр {
    set init() {
        background = new Background(800, 600, RaoColor.WHITE)
    }
    set draw() {
        drawRectangle(200, 50, 250, 100);
        drawCircle(100, 100, 50, RaoColor.GREEN, RaoColor.RED);
        drawLine(0, 0, 100, 100, RaoColor.YELLOW);
        drawEllipse(100, 200, 10, 50);
        drawTriangle(200, 200, 300, 100, 400, 200);
        drawText('Время:', 10, 5);
        drawText(currentTime.toString(), 60, 5);
        drawText("text", 0, 300);
    }
}

resultType Занятость_парикмахера<Состояние_парикмахера>(Парикмахеры парикмахер) {
    set evaluate() {
        return парикмахер.состояние_парикмахера
    }
}

result занятость_парикмахера_1 = new Занятость_парикмахера(парикмахер_1);
result обслужено_парикмахером_1 = new Value([парикмахер_1.количество_обслуженных]);

int ряд(int место) {
    return (место - 1 ) / длина_поля + 1;
}

int столбец(int место) {
    return (место - 1) % длина_поля + 1;
}

search Расстановка_фишек {
    edge перемещение_вправо = new Edge(Перемещение_фишки.create(Место_дырки.СПРАВА, 1), 1)
    edge перемещение_влево = new Edge(Перемещение_фишки.create(Место_дырки.СЛЕВА, -1), 1)
    edge перемещение_вверх = new Edge(Перемещение_фишки.create(Место_дырки.СВЕРХУ, -длина_поля), 1)
    edge перемещение_вниз = new Edge(Перемещение_фишки.create(Место_дырки.СНИЗУ, длина_поля), 1)

    set init() {
        startCondition = [Фишка.all.exists[номер != место]]
        terminateCondition = [Фишка.all.forall[номер == место]]
        heuristic = [0.0]
        compareTops = true
    }
}

ES 0.0 Tracing started
RC 0.0 деталь_1 = {токарная, ожидает_обработки, 10.0}
RC 0.0 деталь_2 = {токарная, ожидает_обработки, 20.0}
RC 0.0 деталь_3 = {фрезерная, ожидает_обработки, 40.0}
RC 0.0 станок_1 = {токарная, свободен}
RC 0.0 станок_2 = {фрезерная, свободен}
ES 0.0 Simulation started
EB 0.0 обработка[0](деталь_1, станок_1)
RK 0.0 деталь_1 = {токарная, обрабатывается, 10.0}
RK 0.0 станок_1 = {токарная, работает}
EF 10.0 обработка[0](деталь_1, станок_1)
RK 10.0 деталь_1 = {токарная, обработана, 10.0}
RK 10.0 станок_1 = {токарная, свободен}
EB 10.0 обработка[1](деталь_2, станок_1)
RK 10.0 деталь_2 = {токарная, обрабатывается, 20.0}
RK 10.0 станок_1 = {токарная, работает}
EB 10.0 обработка[2](деталь_3, станок_2)
RK 10.0 деталь_3 = {фрезерная, обрабатывается, 40.0}
RK 10.0 станок_2 = {фрезерная, работает}
EF 30.0 обработка[1](деталь_2, станок_1)
RK 30.0 деталь_2 = {токарная, обработана, 20.0}
RK 30.0 станок_1 = {токарная, свободен}
EF 50.0 обработка[2](деталь_3, станок_2)
RK 50.0 деталь_3 = {фрезерная, обработана, 40.0}
RK 50.0 станок_2 = {фрезерная, свободен}
ES 50.0 Simulation finished: no more events
